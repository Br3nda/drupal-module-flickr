<?php

// $Id: flickr.module,v 1.10 2006/11/13 17:42:47 drewish Exp $

include(drupal_get_path('module', 'flickr') .'/flickr.inc');

/**
 * Implementation of hook_help().
 */
function flickr_help($section) {
  switch ($section) {
    case 'admin/settings/flickr':
     return t("You will need a Flickr API key to use this module. You can apply for one at <a href='%link'>%link</a>", array('%link' => url('http://www.flickr.com/services/api/keys/apply/')));
    case 'admin/help#flickr':
      return t('The flickr module uses XML-RPC to connect to Flickr\'s API and retreive photo information.');
  }
}

/**
 * Implementation of hook_menu().
 */
function flickr_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/flickr', 'title' => t('flickr'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('flickr_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'description' => t('Change settings for the flickr module.'));


    $items[] = array(
      'path' => 'flickr/test', 'title' => t('flickr test'),
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
      'callback' => 'flickr_test');

    $items[] = array(
      'path' => 'flickr/auth',
      'access' => TRUE,
      'type' => MENU_CALLBACK,
      'callback' => 'flickr_auth_callback');

  }

  return $items;
}

/**
 * Implementation of hook_settings
 */
function flickr_admin_settings() {
  $form['#validate'] = array('flickr_admin_settings_validate' => array());
  $form['flickr_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#default_value' => variable_get('flickr_api_key', ''),
    '#description' => t('API Key from Flickr'),
  );
  $form['flickr_api_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('API Shared Secret'),
    '#default_value' => variable_get('flickr_api_secret', ''),
    '#description' => t("API key's secret from Flickr."),
  );
  return system_settings_form($form);
}

function flickr_admin_settings_validate($form_id, $form) {
  $key = trim($form['flickr_api_key']);
  $sec = trim($form['flickr_api_secret']);

  if ($key && (preg_match('/^[A-Fa-f\d]{32}$/', $key) != 1)) {
    form_set_error('flickr_api_key', t('This does not appear to be a Flickr API key.'));
  }
  if ($sec && (preg_match('/^[A-Fa-f\d]{16}$/', $sec) != 1)) {
    form_set_error('flickr_api_secret', t('This does not appear to be a Flickr API secret.'));
  }
}


/**
 * Implementation of hook_block().
 */
function flickr_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Flickr recent photos by user');
    $blocks[1]['info'] = t('Flickr photosets by user');
    $blocks[2]['info'] = t('Flickr random photos by user');
    return $blocks;
  }
  else if ($op == 'configure') {
    $form = array();

    $count_options = array(1 => '1', 2 => '2', 3 => '3',  4 => '4', 5 => '5', 6 => '6', 7 => '7',  8 => '8', 9 => '9', 10 => '10', 15 => '15', 20 => '20', 25 => '25', 30 => '30');
    // remove the large and original sizes
    $size_options = flickr_photo_sizes();
    unset($size_options['b']);
    unset($size_options['o']);

    $form["flickr_block_{$delta}_user_id"] = array(
      '#type' => 'textfield',
      '#title' => t('Flickr User Id'),
      '#default_value' => variable_get("flickr_block_{$delta}_user_id", ''),
      '#description' => t('The user id of a Flickr user.'),
    );

    switch ($delta) {
    case 0:
      $form['flickr_block_0_show_n'] = array(
        '#type' => 'select',
        '#options' => $count_options,
        '#title' => t('Show the last <em>n</em> photos'),
        '#default_value' => variable_get('flickr_block_0_show_n', 5),
        '#description' => t("The block will show this many of the user's most recent photos.")
      );
      break;
    case 1:
      $form['flickr_block_1_show_n'] = array(
        '#type' => 'select',
        '#options' => $count_options,
        '#title' => t('Show the last <em>n</em> photosets'),
        '#default_value' => variable_get('flickr_block_1_show_n', 5),
        '#description' => t("The block will show this many of the user's photosets.")
      );
      break;
    case 2:
      $form['flickr_block_2_show_n'] = array(
        '#type' => 'select',
        '#options' => $count_options,
        '#title' => t('Show the last <em>n</em> photosets'),
        '#default_value' => variable_get('flickr_block_2_show_n', 5),
        '#description' => t("The block will show this many of the user's photosets.")
      );
      break;
    }
    $form["flickr_block_{$delta}_size"] = array(
      '#type' => 'select',
      '#options' => $size_options,
      '#title' => t('Size of photos'),
      '#default_value' => variable_get("flickr_block_{$delta}_size", 's'),
      '#description' => t("Select the size of photos you'd like to display in the block.")
    );
    return $form;
  }
  else if ($op == 'save') {
    switch($delta) {
      case 0:
      case 1:
      case 2:
        variable_set("flickr_block_{$delta}_user_id", $edit["flickr_block_{$delta}_user_id"]);
        variable_set("flickr_block_{$delta}_show_n", $edit["flickr_block_{$delta}_show_n"]);
        variable_set("flickr_block_{$delta}_size", $edit["flickr_block_{$delta}_size"]);
    }
  }
  else if ($op == 'view') {
    switch ($delta) {
    case 0:
      $user_id = variable_get('flickr_block_0_user_id', '');
      $show_n = variable_get('flickr_block_0_show_n', 5);
      $size = variable_get('flickr_block_0_size', 's');
      $block['subject'] = t('Recent Flickr');
      $block['content'] = _flickr_block_recent($user_id, $show_n, $size);
      break;
    case 1:
      $user_id = variable_get('flickr_block_1_user_id', '');
      $show_n = variable_get('flickr_block_1_show_n', 5);
      $size = variable_get('flickr_block_1_size', 's');
      $block['subject'] = t('Flickr Photosets');
      $block['content'] = _flickr_block_photosets($user_id, $show_n, $size);
      break;
    case 2:
      $user_id = variable_get('flickr_block_2_user_id', '');
      $show_n = variable_get('flickr_block_2_show_n', 5);
      $size = variable_get('flickr_block_2_size', 's');
      $block['subject'] = t('Flickr Random');
      $block['content'] = _flickr_block_random($user_id, $show_n, $size);
      break;
    }
    return $block;
  }
}


function flickr_filter_tips($delta, $format, $long = FALSE) {
  switch ($delta) {
    case 0:
      $output = t('Insert Flickr images: [flickr-photo:id=230452326,size=s] or [flickr-photoset:id=72157594262419167,size=m]. ');
      if ($long) {
        $output .= t('The size parameter can be one of the following:');
        $items = array();
        foreach (flickr_photo_sizes() as $key => $text) {
          $items[] = "$key - $text";
        }
        $output .= theme('item_list', $items);
      }
      return $output;
  }
}

function flickr_filter($op, $delta = 0, $format = -1, $text = '') {
  if ($op == 'list') {
    return array(0 => t('flickr inline'));
  }

  switch ($delta) {
    case 0:
      switch ($op) {
        case 'description':
          return t('Insert photos from Flickr.');

        case 'no cache':
          // TODO: only return true when testing the filter
          // return TRUE;
          return FALSE;

        case 'prepare':
          return $text;

        case 'process':
          $text = preg_replace_callback('/\[flickr-photo:(.+)\]/', 'flickr_filter_callback_photo', $text);
          $text = preg_replace_callback('/\[flickr-photoset:(.+)\]/', 'flickr_filter_callback_photoset', $text);
          return $text;
      }
      break;
  }
}

/**
 * Parse parameters to the fiter from a format like:
 *   id=26159919@N00, size=m,show = 9
 * into an associative array.
 */
function flickr_filter_split_config($string) {
  $config = array();
  // put each setting on its own line
  $string = str_replace(',', "\n", $string);
  // break them up around commas
  preg_match_all('/([a-zA-Z]+)=([@0-9a-zA-Z]+)/', $string, $parts, PREG_SET_ORDER);
  foreach($parts as $part) {
    // normalize to lower case and remove extra spaces
    $config[strtolower(trim($part[1]))] = trim($part[2]);
  }
  return $config;
}

/**
 * Filter callback for a photo.
 */
function flickr_filter_callback_photo($matches) {
  $config = flickr_filter_split_config($matches[1]);

  $output = '';
  if (isset($config['id'])) {
    $result = flickr_request(
      'flickr.photos.getInfo',
      array(
        'photo_id' => $config['id'],
      )
    );
    $output = theme('flickr_photo', $result['photo'], $config['size']);
  }
  return $output ;
}

/**
 * Filter callback for a photoset.
 */
function flickr_filter_callback_photoset($matches) {
  $config = flickr_filter_split_config($matches[1]);

  $output = '';
  if (isset($config['id'])) {
    $result = flickr_request(
      'flickr.photosets.getInfo',
      array(
        'photoset_id' => $config['id'],
      )
    );
    $output = theme('flickr_photoset', $result['photoset'], $result['photoset']['owner'], $config['size']);
  }
  return $output ;
}


function _flickr_block_recent($user_id, $show_n, $size) {
  $result = flickr_request(
    'flickr.photos.search',
    array(
      'user_id' => $user_id,
      'per_page' => $show_n,
    )
  );
  $output = '';
  foreach((array)$result['photos']['photo'] as $photo) {
    $output .= theme('flickr_photo', $photo, $size);
  }
  return $output;
}

function _flickr_block_photosets($user_id, $show_n, $size) {
  $output = '';
  $result = flickr_request('flickr.photosets.getList', array('user_id' => $user_id));
  $to = min($show_n, count($result['photosets']['photoset']));
  for ($i = 0; $i < $to; $i++) {
    $output .= theme('flickr_photoset', $result['photosets']['photoset'][$i], $user_id, $size);
  }
  return $output;
}

function _flickr_block_random($user_id, $show_n, $size) {
  $request = array(
    'user_id' => $user_id,
    'per_page' => 500,
    'page' => 1,
  );
  $result = flickr_request('flickr.photos.search', $request);
  $page_count = $result['photos']['pages'];

  // we shouldn't try to return more than the total number of photos
  $to = min($show_n, $result['photos']['total']);
  $output = '';
  for ($i = 0; $i < $to; $i++) {
    sleep(0.5);
    // request a random page
    $request['page'] = rand(1, $page_count);
    $result = flickr_request('flickr.photos.search', $request);
    // then select a random photo
    $photo = rand(0, count($result['photos']['photo']));
    $output .= theme('flickr_photo', $result['photos']['photo'][$photo], $size);
  }

  return $output;
}

function flickr_test() {
/*
  $result = flickr_request(
    'flickr.photos.search',
    array(
      'user_id' => variable_get('flickr_uid','26159919@N00'),
      'text' => 'etta',
      'per_page' => '16'
    )
  );
*/
  $result = flickr_request('flickr.photosets.getList', array('user_id' => '26159919@N00'));

  $output = '';
  foreach((array)$result->children as $photo) {
//var_dump($result);exit();
    $output .= theme('flickr_photoset', $photo, 't');
  }
  $output .= "<pre>". print_r($result, true) ."</pre>";

  return $output;
}


function theme_flickr_photo($p, $size = NULL, $format = NULL) {
  $img_url = flickr_photo_img($p['server'], $p['id'], $p['secret'], $size, $format);
  $title = is_array($p['title']) ? $p['title']['_content'] : $p['title'];
  $img = theme('image', $img_url, $title, $title, array('class' => 'flickr photo'), FALSE);
  $photo_url = flickr_photo_page_url($p['owner'], $p['id']);
  return "<a href='$photo_url'>$img</a>";
}

function theme_flickr_photoset($ps, $owner, $size = NULL, $format = NULL) {
  $img_url = flickr_photo_img($ps['server'], $ps['primary'], $ps['secret'], $size, $format);
  $title = is_array($ps['title']) ? $ps['title']['_content'] : $ps['title'];
  $img = theme('image', $img_url, $title, $title, array('class' => 'flickr photoset'), FALSE);
  $photo_url = flickr_photoset_page_url($owner, $ps['id']);
  return "<a href='$photo_url'>$img</a>";
}

function flickr_photo_sizes() {
  return array(
    's' => t('small square 75x75'),
    't' => t('thumbnail, 100 on longest side'),
    'm' => t('small, 240 on longest side'),
    '-' => t('medium, 500 on longest side'),
    'b' => t('large, 1024 on longest side'),
    'o' => t('original image')
  );
};