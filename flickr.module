<?php

// $Id: flickr.module,v 1.25 2007/01/03 18:53:03 andrewlevine Exp $

require_once(drupal_get_path('module', 'flickr') .'/flickr.inc');

/**
 * Implementation of hook_help().
 */
function flickr_help($section) {
  switch ($section) {
    case 'admin/settings/flickr':
     return t("You will need a Flickr API key to use this module. You can apply for one at <a href='@link'>@link</a>", array('@link' => url('http://www.flickr.com/services/api/keys/apply/')));
    case 'admin/help#flickr':
      return t('The flickr module uses XML-RPC to connect to Flickr\'s API and retreive photo information.');
  }
}

/**
 * Implementation of hook_menu().
 */
function flickr_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/flickr', 'title' => t('Flickr'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('flickr_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'description' => t('Change settings for the flickr module.'));

    $items[] = array(
      'path' => 'flickr', 'title' => t('Flickr'),
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM,
      'callback' => 'flickr_recent');

    $items[] = array(
      'path' => 'flickr/photosets', 'title' => t('Flickr photosets'),
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM,
      'callback' => 'flickr_photosets',
    );

    $items[] = array(
      'path' => 'flickr/auth',
      'access' => TRUE,
      'type' => MENU_CALLBACK,
      'callback' => 'flickr_auth_callback');

  }

  return $items;
}

/**
 * Implementation of hook_settings
 */
function flickr_admin_settings() {
  $form['#validate'] = array('flickr_admin_settings_validate' => array());
  $form['flickr_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#required' => TRUE,
    '#default_value' => variable_get('flickr_api_key', ''),
    '#description' => t('API Key from Flickr'),
  );
  $form['flickr_api_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('API Shared Secret'),
    '#required' => TRUE,
    '#default_value' => variable_get('flickr_api_secret', ''),
    '#description' => t("API key's secret from Flickr."),
  );
  $form['flickr_default_userid'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Flickr User Id'),
    '#default_value' => variable_get('flickr_default_userid', ''),
    '#description' => t("An, optional, default Flickr username or user id. This will be used when no user is specified."),
  );

  // we need an api key before we can verify usernames
  if (!$form['flickr_api_key']['#default_value']) {
    $form['flickr_default_userid']['#disabled'] = TRUE;
  }

  return system_settings_form($form);
}

function flickr_admin_settings_validate($form_id, $form) {
  $key = trim($form['flickr_api_key']);
  $sec = trim($form['flickr_api_secret']);
  $uid = trim($form['flickr_default_userid']);

  if ($key && (preg_match('/^[A-Fa-f\d]{32}$/', $key) != 1)) {
    form_set_error('flickr_api_key', t('This does not appear to be a Flickr API key.'));
  }
  if ($sec && (preg_match('/^[A-Fa-f\d]{16}$/', $sec) != 1)) {
    form_set_error('flickr_api_secret', t('This does not appear to be a Flickr API secret.'));
  }
  if ($uid) {
    if (preg_match('/^\d+@N\d+$/', $uid)) {
      // it's already a uid
    }
    else {
      $response = flickr_user_find_by_username($uid);
      if (!isset($response['stat']) || $response['stat'] != 'ok') {
        form_set_error('flickr_default_userid', t('%uid is not a Flickr user id and it does not appear to be a valid user name. Flickr reported %error-message', array('%uid' => $uid, '%error-message' => $response['message'])));
      }
    }
  }
}

function flickr_admin_settings_submit($form_id, $form) {
  // clean up the data ...
  $form['flickr_api_key'] = trim($form['flickr_api_key']);
  $form['flickr_api_secret'] = trim($form['flickr_api_secret']);
  $form['flickr_default_userid'] = trim($form['flickr_default_userid']);

  // ... replace the usernames with a user id ...
  if (preg_match('/^\d+@N\d+$/', $form['flickr_default_userid']) == 0) {
    $username = $form['flickr_default_userid'];
    $response = flickr_user_find_by_username($username);
    if (isset($response['stat']) && $response['stat'] == 'ok') {
      drupal_set_message(t("The Flickr username %username has been replaced with the corresponding user id %uid.", array('%username' => $form['flickr_default_userid'], '%uid' => $response['user']['id'])));
      $form['flickr_default_userid'] = $response['user']['id'];
    }
  }

  // ... and save the settings
  system_settings_form_submit($form_id, $form);
}


function flickr_recent() {
  drupal_add_css(drupal_get_path('module', 'flickr') .'/flickr.css');

  $result = flickr_request(
    'flickr.photos.search',
    array(
      'user_id' => variable_get('flickr_default_userid', ''),
      'per_page' => 20,
    )
  );
  $output = "<div class='fickr-photoset'>\n";
  foreach((array)$result['photos']['photo'] as $photo) {
    $output .= theme('flickr_photo_box', $photo, 'm');
  }
  $output .= '</div>';
  return $output;
}


function flickr_photosets($flickr_userid = NULL) {
  drupal_add_css(drupal_get_path('module', 'flickr') .'/flickr.css');

  if (!isset($flickr_userid)) {
    $flickr_userid = variable_get('flickr_default_userid', '');
  }

  $output = "<div class='fickr-photosets'>\n";
  $result = flickr_request('flickr.photosets.getList', array('user_id' => $flickr_userid));
  foreach((array)$result['photosets']['photoset'] as $photoset) {
    $output .= theme('flickr_photoset_box', $photoset, $flickr_userid, 's');
  }
  $output .= '</div>';

  return $output;
}


function theme_flickr_photo($p, $size = NULL, $format = NULL) {
  $img = flickr_img($p, $size);
  $photo_url = flickr_photo_page_url($p['owner'], $p['id']);
  return l($img, $photo_url, NULL, NULL, NULL, TRUE, TRUE);
}

function theme_flickr_photo_box($p, $size = NULL, $format = NULL) {
  $img = flickr_img($p, $size);
  $title = is_array($p['title']) ? $p['title']['_content'] : $p['title'];
  $photo_url = flickr_photo_page_url($p['owner'], $p['id']);

  $output .= "<div class='flickr-photo-box'>\n";
  $output .= "<a href='$photo_url'>$img</a>";
  $output .= "<a href='$photo_url'>";
  $output .= '<div class="flickr-photo-title">'. $title ."</div>\n";
  $output .= "</a>";
  $output .= "</div>\n";

  return $output;
}

function theme_flickr_photoset($ps, $owner, $size = NULL, $format = NULL) {
  $title = is_array($ps['title']) ? $ps['title']['_content'] : $ps['title'];
  $img = flickr_img($ps, $size);
  $photo_url = flickr_photoset_page_url($owner, $ps['id']);
  return l($img, $photo_url, NULL, NULL, NULL, TRUE, TRUE);
}

function theme_flickr_photoset_box($ps, $owner, $size = NULL, $format = NULL) {
  $title = is_array($ps['title']) ? $ps['title']['_content'] : $ps['title'];
  $photo_url = flickr_photoset_page_url($owner, $ps['id']);

  $output .= "<div class='flickr-photoset-box'>\n";
  $output .= "<a href='$photo_url'>";
  $output .= flickr_img($ps, $size);
  $output .= "</a>";
  $output .= "<a href='$photo_url'>";
  $output .= '<div class="flickr-photoset-title">'. $title ."</div>\n";
  $output .= "</a>";
  $output .= '<div class="flickr-photoset-count">'. format_plural($ps['photos'], '@count photo', '@count photos') ."</div>\n";
  $output .= "</div>\n";

  return $output;
}

/**
 * Implimentation of the hook_user()
 * Add an extra field for the user to enter his flickr nsid.
 */
function flickr_user($op, &$edit, &$account, $category = NULL) {
  $data = unserialize($account->data);

  if ($op == 'form' && $category == 'account') {
    $form['flickr'] = array(
      '#type' => 'fieldset',
      '#title' => t('Flickr settings'),
      '#collapsible' => FALSE,
      '#weight' => 4,
    );
    $form['flickr']['nsid'] = array(
      '#type' => 'textfield',
      '#title' => t('Flickr NSID'),
      '#default_value' => $data['nsid'],
      '#description' => t('Please enter your Flickr NSID.'),
    );
    return $form;
  }
}
