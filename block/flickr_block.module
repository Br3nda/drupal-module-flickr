<?php

// $Id: flickr_block.module,v 1.4 2007/02/15 05:43:37 andrewlevine Exp $


/**
 * Implementation of hook_block().
 */

function flickr_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
  case 'list':
    // User base blocks
    $blocks[0]['info'] = t('Flickr recent photos by user');
    $blocks[1]['info'] = t('Flickr photosets by user');
    $blocks[2]['info'] = t('Flickr random photos by user');

    // Site wide blocks
    $blocks[3]['info'] = t('Flickr recent photos');
    $blocks[4]['info'] = t('Flickr recent photosets');
    $blocks[5]['info'] = t('Flickr random photos');

    return $blocks;

  case 'configure':
    $count_options = array(1 => '1', 2 => '2', 3 => '3',  4 => '4', 5 => '5', 6 => '6', 7 => '7',  8 => '8', 9 => '9', 10 => '10', 15 => '15', 20 => '20', 25 => '25', 30 => '30');
    // remove the large and original sizes
    $size_options = flickr_photo_sizes();
    unset($size_options['b']);
    unset($size_options['o']);

    $form = array();
    $form["flickr_block_{$delta}_user_id"] = array(
      '#type' => 'textfield',
      '#title' => t('Flickr User Id'),
      '#default_value' => variable_get("flickr_block_{$delta}_user_id", ''),
      '#description' => t("The user id of a Flickr user. If this is left blank, the sites's default user will be used. Current default id is " . variable_get('flickr_default_userid', '')),
    );
    $form["flickr_block_{$delta}_show_n"] = array(
      '#type' => 'select',
      '#options' => $count_options,
      '#title' => t('Show the last <em>n</em> photosets'),
      '#default_value' => variable_get("flickr_block_{$delta}_show_n", 4),
      '#description' => t("The block will show this many of the user's photos.")
    );
    $form["flickr_block_{$delta}_size"] = array(
      '#type' => 'select',
      '#options' => $size_options,
      '#title' => t('Size of photos'),
      '#default_value' => variable_get("flickr_block_{$delta}_size", 's'),
      '#description' => t("Select the size of photos you'd like to display in the block.")
    );

    switch ($delta) {
    case 0:
      // user page, recent
      unset($form["flickr_block_{$delta}_user_id"]);
      break;
    case 1:
      // user page, photosets
      unset($form["flickr_block_{$delta}_user_id"]);
      // photoset, not photos
      $form["flickr_block_{$delta}_show_n"]['#title'] = t('Show the last <em>n</em> photosets');
      $form["flickr_block_{$delta}_show_n"]['#description'] = t("The block will show this many of the user's photosets.");
      break;
    case 2:
      // user page, random
      unset($form["flickr_block_{$delta}_user_id"]);
      break;

    case 3:
      // sitewide, recent
      break;
    case 4:
      // sitewite photoset, not photos
      $form["flickr_block_{$delta}_show_n"]['#title'] = t('Show the last <em>n</em> photosets');
      $form["flickr_block_{$delta}_show_n"]['#description'] = t("The block will show this many of the user's photosets.");
      break;
    case 5:
      // sitewide, random
      break;
    }

    return $form;

  case 'save':
    switch ($delta) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      variable_set("flickr_block_{$delta}_user_id", $edit["flickr_block_{$delta}_user_id"]);
      variable_set("flickr_block_{$delta}_show_n", $edit["flickr_block_{$delta}_show_n"]);
      break;
    }
    break;

  case 'view': default:
    // Get the default user id as a fallback
    $default_userid = variable_get('flickr_default_userid', '');

    switch ($delta) {
    case 0:
      $user_id = _flickr_block_get_userid(arg(1));
      $show_n = variable_get("flickr_block_{$delta}_show_n", 4);
      $size = variable_get("flickr_block_{$delta}_size", 's');

      $block['subject'] = t('Flickr recent photos by user');
      $block['content'] = _flickr_block_recent($user_id, $show_n, $size);

      break;
    case 1:
      $user_id = _flickr_block_get_userid(arg(1));
      $show_n = variable_get("flickr_block_{$delta}_show_n", 4);
      $size = variable_get("flickr_block_{$delta}_size", 's');

      $block['subject'] = t('Flickr recent photosets');
      $block['content'] = _flickr_block_photosets($user_id, $show_n, $size);

      break;
    case 2:
      $user_id = _flickr_block_get_userid(arg(1));
      $show_n = variable_get("flickr_block_{$delta}_show_n", 4);
      $size = variable_get("flickr_block_{$delta}_size", 's');

      $block['subject'] = t('Flickr random photos');
      $block['content'] = _flickr_block_random($user_id, $show_n, $size);

      break;
    case 3:
      $user_id = variable_get("flickr_block_{$delta}_user_id", $default_userid);
      $show_n = variable_get("flickr_block_{$delta}_show_n", 4);
      $size = variable_get("flickr_block_{$delta}_size", 's');

      $block['subject'] = t('Flickr recent photos');
      $block['content'] = _flickr_block_recent($user_id, $show_n, $size);

      break;
    case 4:
      $user_id = variable_get("flickr_block_{$delta}_user_id", $default_userid);
      $show_n = variable_get("flickr_block_{$delta}_show_n", 4);
      $size = variable_get("flickr_block_{$delta}_size", 's');

      $block['subject'] = t('Flickr recent photosets');
      $block['content'] = _flickr_block_photosets($user_id, $show_n, $size);

      break;
    case 5:
      $user_id = variable_get("flickr_block_{$delta}_user_id", $default_userid);
      $show_n = variable_get("flickr_block_{$delta}_show_n", 4);
      $size = variable_get("flickr_block_{$delta}_size", 's');

      $block['subject'] = t('Flickr random photos');
      $block['content'] = _flickr_block_random($user_id, $show_n, $size);

      break;
    }

    return $block;
  }
}

function _flickr_block_get_userid($id) {
  $result = db_fetch_object(db_query('SELECT data FROM {users} WHERE uid = %d', $id));
  $data = unserialize($result->data);
  return $data['nsid'];
}

function _flickr_block_recent($user_id, $show_n, $size) {
  $result = flickr_request(
    'flickr.photos.search',
    array(
      'user_id' => $user_id,
      'per_page' => $show_n,
    )
  );
  $output = '';
  foreach((array)$result['photos']['photo'] as $photo) {
    $output .= theme('flickr_photo', $photo, $size);
  }
  return $output;
}

function _flickr_block_photosets($user_id, $show_n, $size) {
  $output = '';
  $result = flickr_request('flickr.photosets.getList', array('user_id' => $user_id));
  $to = min($show_n, count($result['photosets']['photoset']));
  for ($i = 0; $i < $to; $i++) {
    $output .= theme('flickr_photoset', $result['photosets']['photoset'][$i], $user_id, $size);
  }
  return $output;
}

function _flickr_block_random($user_id, $show_n, $size) {
  $request = array(
    'user_id' => $user_id,
    'per_page' => 500,
    'page' => 1,
  );
  $result = flickr_request('flickr.photos.search', $request);
  $page_count = $result['photos']['pages'];

  // we shouldn't try to return more than the total number of photos
  $to = min($show_n, $result['photos']['total']);
  $output = '';
  for ($i = 0; $i < $to; $i++) {
    sleep(0.125);
    // request a random page
    $request['page'] = rand(1, $page_count);
    $result = flickr_request('flickr.photos.search', $request);
    // then select a random photo
    $index = rand(0, count($result['photos']['photo']));
    $output .= theme('flickr_photo', $result['photos']['photo'][$index], $size);
  }

  return $output;
}
